class EmployeeEditor {
    constructor() {
        this.employeeData = null;
        this.isEditing = false;
        this.init();
    }

    init() {
        this.loadData();
        this.createEditorUI();
        this.setupEventListeners();
    }

    loadData() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ employee-data.js –∏–ª–∏ –∏–∑ localStorage
        if (typeof employeeData !== 'undefined') {
            this.employeeData = JSON.parse(JSON.stringify(employeeData.employee));
        } else {
            // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.employeeData = {
                "full_name": "–ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á",
                "position": "–í–µ–¥—É—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é",
                "company": "–û–û–û ¬´–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞¬ª",
                "department": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è",
                "office_location": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —Ç–µ—Ö–Ω–æ–ª–∞—Ä–∫ ¬´–ò–¥–µ—è¬ª",
                "contact": {
                    "email": "sergey.ivanov@tldp.ru",
                    "telegram": "@sergey_vision"
                },
                "branding": {
                    "logo_url": "",
                    "corporate_colors": {
                        "primary": "#0052CC",
                        "secondary": "#0088D9"
                    },
                    "slogan": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä"
                },
                "privacy_level": "low"
            };
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        const savedData = localStorage.getItem('employeeCustomData');
        if (savedData) {
            try {
                this.employeeData = JSON.parse(savedData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
            }
        }
    }

    createEditorUI() {
        const controlsPanel = document.querySelector('.controls-panel');
        if (!controlsPanel) return;

        const editorHTML = `
            <div class="employee-editor">
                <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h3>
                
                <div class="form-group">
                    <label for="editFullName">–§–ò–û:</label>
                    <input type="text" id="editFullName" value="${this.escapeHtml(this.employeeData.full_name)}">
                </div>

                <div class="form-group">
                    <label for="editPosition">–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
                    <input type="text" id="editPosition" value="${this.escapeHtml(this.employeeData.position)}">
                </div>

                <div class="form-group">
                    <label for="editCompany">–ö–æ–º–ø–∞–Ω–∏—è:</label>
                    <input type="text" id="editCompany" value="${this.escapeHtml(this.employeeData.company)}">
                </div>

                <div class="form-group">
                    <label for="editDepartment">–û—Ç–¥–µ–ª:</label>
                    <input type="text" id="editDepartment" value="${this.escapeHtml(this.employeeData.department)}">
                </div>

                <div class="form-group">
                    <label for="editLocation">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
                    <input type="text" id="editLocation" value="${this.escapeHtml(this.employeeData.office_location)}">
                </div>

                <div class="form-section">
                    <h4>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                    <div class="form-group">
                        <label for="editEmail">Email:</label>
                        <input type="email" id="editEmail" value="${this.escapeHtml(this.employeeData.contact.email)}">
                    </div>
                    <div class="form-group">
                        <label for="editTelegram">Telegram:</label>
                        <input type="text" id="editTelegram" value="${this.escapeHtml(this.employeeData.contact.telegram)}">
                    </div>
                </div>

                <div class="form-section">
                    <h4>–ë—Ä–µ–Ω–¥–∏–Ω–≥</h4>
                    <div class="form-group">
                        <label for="editSlogan">–°–ª–æ–≥–∞–Ω:</label>
                        <input type="text" id="editSlogan" value="${this.escapeHtml(this.employeeData.branding.slogan)}">
                    </div>
                </div>

                <div class="form-actions">
                    <button id="saveData">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button id="resetData">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
                </div>

                <div id="editorMessage" class="message" style="display: none;"></div>
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞
        const textColorControls = document.querySelector('.text-color-controls');
        if (textColorControls) {
            textColorControls.insertAdjacentHTML('afterend', editorHTML);
        } else {
            controlsPanel.insertAdjacentHTML('afterbegin', editorHTML);
        }
    }

    setupEventListeners() {
        document.getElementById('saveData')?.addEventListener('click', () => this.saveData());
        document.getElementById('resetData')?.addEventListener('click', () => this.resetData());

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        const inputs = document.querySelectorAll('.employee-editor input');
        inputs.forEach(input => {
            input.addEventListener('change', () => {
                this.updateDataFromForm();
            });
        });
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    updateDataFromForm() {
        this.employeeData = {
            full_name: document.getElementById('editFullName').value,
            position: document.getElementById('editPosition').value,
            company: document.getElementById('editCompany').value,
            department: document.getElementById('editDepartment').value,
            office_location: document.getElementById('editLocation').value,
            contact: {
                email: document.getElementById('editEmail').value,
                telegram: document.getElementById('editTelegram').value
            },
            branding: {
                logo_url: this.employeeData.branding.logo_url,
                corporate_colors: this.employeeData.branding.corporate_colors, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–≤–µ—Ç–∞
                slogan: document.getElementById('editSlogan').value
            },
            privacy_level: this.employeeData.privacy_level
        };
    }

    saveData() {
        this.updateDataFromForm();
        
        try {
            localStorage.setItem('employeeCustomData', JSON.stringify(this.employeeData));
            this.showMessage('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (window.employeeDisplay) {
                window.employeeDisplay.employeeData = this.employeeData;
                window.employeeDisplay.updateDisplay();
            }
            
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', this.employeeData);
        } catch (e) {
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
        }
    }

    resetData() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º?')) {
            localStorage.removeItem('employeeCustomData');
            this.loadData();
            this.populateForm();
            this.showMessage('üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º', 'success');
            
            if (window.employeeDisplay) {
                window.employeeDisplay.employeeData = this.employeeData;
                window.employeeDisplay.updateDisplay();
            }
        }
    }

    populateForm() {
        document.getElementById('editFullName').value = this.employeeData.full_name;
        document.getElementById('editPosition').value = this.employeeData.position;
        document.getElementById('editCompany').value = this.employeeData.company;
        document.getElementById('editDepartment').value = this.employeeData.department;
        document.getElementById('editLocation').value = this.employeeData.office_location;
        document.getElementById('editEmail').value = this.employeeData.contact.email;
        document.getElementById('editTelegram').value = this.employeeData.contact.telegram;
        document.getElementById('editSlogan').value = this.employeeData.branding.slogan;
    }

    showMessage(text, type) {
        const messageEl = document.getElementById('editorMessage');
        if (messageEl) {
            messageEl.textContent = text;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';
            
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 3000);
        }
    }

    getEmployeeData() {
        return this.employeeData;
    }
}